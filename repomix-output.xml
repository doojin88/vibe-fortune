This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: ./supabase/**/*
- Files matching these patterns are excluded: ./**/*.md
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
./
  supabase/
    .temp/
      cli-latest
      gotrue-version
      pooler-url
      postgres-version
      project-ref
      rest-version
      storage-migration
      storage-version
    migrations/
      0001_create_example_table.sql
      20251027000000_initial_schema.sql
      20251028000000_add_model_used_column.sql
      20251029000000_add_subscription_schema.sql
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="./supabase/.temp/cli-latest">
v2.54.10
</file>

<file path="./supabase/.temp/gotrue-version">
v2.180.0
</file>

<file path="./supabase/.temp/pooler-url">
postgresql://postgres.iqqnqrjwmcgofqalknvi@aws-1-ap-northeast-2.pooler.supabase.com:5432/postgres
</file>

<file path="./supabase/.temp/postgres-version">
17.6.1.025
</file>

<file path="./supabase/.temp/project-ref">
iqqnqrjwmcgofqalknvi
</file>

<file path="./supabase/.temp/rest-version">
v13.0.5
</file>

<file path="./supabase/.temp/storage-migration">
fix-object-level
</file>

<file path="./supabase/.temp/storage-version">
v1.27.6
</file>

<file path="./supabase/migrations/0001_create_example_table.sql">
-- Migration: create example table for backend reference implementation
-- Ensures pgcrypto available for gen_random_uuid
create extension if not exists "pgcrypto";

create table if not exists public.example (
  id uuid primary key default gen_random_uuid(),
  full_name text,
  avatar_url text,
  bio text,
  updated_at timestamptz not null default now()
);

comment on table public.example is 'Example table used by the hono + next.js starter backend layer.';

insert into public.example (full_name, avatar_url, bio)
values
  (
    'Jane Example',
    'https://picsum.photos/seed/jane-example/200/200',
    'Demonstration record generated by the starter migration.'
  )
  on conflict do nothing;

ALTER TABLE IF EXISTS public.example DISABLE ROW LEVEL SECURITY;
</file>

<file path="./supabase/migrations/20251027000000_initial_schema.sql">
-- users 테이블
CREATE TABLE IF NOT EXISTS users (
  id text PRIMARY KEY,
  email text NOT NULL UNIQUE,
  name text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

-- saju_tests 테이블
CREATE TABLE IF NOT EXISTS saju_tests (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id text NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  name text NOT NULL,
  birth_date date NOT NULL,
  birth_time text,
  gender text NOT NULL CHECK (gender IN ('male', 'female')),
  result text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

-- 인덱스
CREATE INDEX IF NOT EXISTS idx_saju_tests_user_created
  ON saju_tests(user_id, created_at DESC);

-- updated_at 트리거 함수
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- updated_at 트리거
CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_saju_tests_updated_at
  BEFORE UPDATE ON saju_tests
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- RLS 비활성화 (가이드라인에 따라)
ALTER TABLE users DISABLE ROW LEVEL SECURITY;
ALTER TABLE saju_tests DISABLE ROW LEVEL SECURITY;
</file>

<file path="./supabase/migrations/20251028000000_add_model_used_column.sql">
-- saju_tests 테이블에 model_used 컬럼 추가
ALTER TABLE saju_tests
ADD COLUMN IF NOT EXISTS model_used text NOT NULL DEFAULT 'flash'
CHECK (model_used IN ('flash', 'pro'));

COMMENT ON COLUMN saju_tests.model_used IS 'Gemini 모델: flash(무료), pro(Pro 구독자)';
</file>

<file path="./supabase/migrations/20251029000000_add_subscription_schema.sql">
-- users 테이블에 구독 관련 컬럼 추가
ALTER TABLE users
ADD COLUMN IF NOT EXISTS subscription_status text NOT NULL DEFAULT 'free'
CHECK (subscription_status IN ('free', 'pro', 'cancelled', 'payment_failed'));

ALTER TABLE users
ADD COLUMN IF NOT EXISTS test_count integer NOT NULL DEFAULT 3;

COMMENT ON COLUMN users.subscription_status IS '구독 상태: free(무료), pro(Pro), cancelled(취소 예약), payment_failed(결제 실패)';
COMMENT ON COLUMN users.test_count IS '잔여 검사 횟수';

-- subscriptions 테이블 생성
CREATE TABLE IF NOT EXISTS subscriptions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id text NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  status text NOT NULL DEFAULT 'active'
    CHECK (status IN ('active', 'cancelled', 'payment_failed')),
  next_billing_date timestamptz,
  card_number text,
  card_company text,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

-- payments 테이블 생성
CREATE TABLE IF NOT EXISTS payments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id text NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  subscription_id uuid REFERENCES subscriptions(id) ON DELETE CASCADE,
  amount integer NOT NULL,
  currency text NOT NULL DEFAULT 'KRW',
  status text NOT NULL
    CHECK (status IN ('pending', 'completed', 'failed', 'cancelled')),
  payment_key text,
  order_id text,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

-- 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id
  ON subscriptions(user_id);

CREATE INDEX IF NOT EXISTS idx_payments_user_id
  ON payments(user_id);

CREATE INDEX IF NOT EXISTS idx_payments_subscription_id
  ON payments(subscription_id);

-- updated_at 트리거 추가
CREATE TRIGGER update_subscriptions_updated_at
  BEFORE UPDATE ON subscriptions
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_payments_updated_at
  BEFORE UPDATE ON payments
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- RLS 비활성화 (가이드라인에 따라)
ALTER TABLE subscriptions DISABLE ROW LEVEL SECURITY;
ALTER TABLE payments DISABLE ROW LEVEL SECURITY;
</file>

</files>
